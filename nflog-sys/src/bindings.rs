/* automatically generated by rust-bindgen */

pub const NF_NETLINK_CONNTRACK_NEW: u32 = 1;
pub const NF_NETLINK_CONNTRACK_UPDATE: u32 = 2;
pub const NF_NETLINK_CONNTRACK_DESTROY: u32 = 4;
pub const NF_NETLINK_CONNTRACK_EXP_NEW: u32 = 8;
pub const NF_NETLINK_CONNTRACK_EXP_UPDATE: u32 = 16;
pub const NF_NETLINK_CONNTRACK_EXP_DESTROY: u32 = 32;
pub const NFNL_NFA_NEST: u32 = 32768;
pub const NFA_ALIGNTO: u32 = 4;
pub const NFNETLINK_V0: u32 = 0;
pub const NFNL_SUBSYS_NONE: u32 = 0;
pub const NFNL_SUBSYS_CTNETLINK: u32 = 1;
pub const NFNL_SUBSYS_CTNETLINK_EXP: u32 = 2;
pub const NFNL_SUBSYS_QUEUE: u32 = 3;
pub const NFNL_SUBSYS_ULOG: u32 = 4;
pub const NFNL_SUBSYS_OSF: u32 = 5;
pub const NFNL_SUBSYS_IPSET: u32 = 6;
pub const NFNL_SUBSYS_COUNT: u32 = 7;
pub const NFULNL_PREFIXLEN: u32 = 30;
pub const NFULNL_COPY_NONE: u8 = 0;
pub const NFULNL_COPY_META: u8 = 1;
pub const NFULNL_COPY_PACKET: u8 = 2;
pub const NFULNL_CFG_F_SEQ: u16 = 1;
pub const NFULNL_CFG_F_SEQ_GLOBAL: u16 = 2;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfgenmsg {
    pub nfgen_family: u8,
    pub version: u8,
    pub res_id: u16,
}
#[test]
fn bindgen_test_layout_nfgenmsg() {
    assert_eq!(
        ::std::mem::size_of::<nfgenmsg>(),
        4usize,
        concat!("Size of: ", stringify!(nfgenmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<nfgenmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(nfgenmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfgenmsg>())).nfgen_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfgenmsg),
            "::",
            stringify!(nfgen_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfgenmsg>())).version as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nfgenmsg),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfgenmsg>())).res_id as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nfgenmsg),
            "::",
            stringify!(res_id)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nfulnl_msg_packet_hdr {
    pub hw_protocol: u16,
    pub hook: u8,
    pub _pad: u8,
}
#[test]
fn bindgen_test_layout_nfulnl_msg_packet_hdr() {
    assert_eq!(
        ::std::mem::size_of::<nfulnl_msg_packet_hdr>(),
        4usize,
        concat!("Size of: ", stringify!(nfulnl_msg_packet_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nfulnl_msg_packet_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(nfulnl_msg_packet_hdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nfulnl_msg_packet_hdr>())).hw_protocol as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hdr),
            "::",
            stringify!(hw_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfulnl_msg_packet_hdr>())).hook as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hdr),
            "::",
            stringify!(hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfulnl_msg_packet_hdr>()))._pad as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hdr),
            "::",
            stringify!(_pad)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nfulnl_msg_packet_hw {
    pub hw_addrlen: u16,
    pub _pad: u16,
    pub hw_addr: [u8; 8usize],
}
#[test]
fn bindgen_test_layout_nfulnl_msg_packet_hw() {
    assert_eq!(
        ::std::mem::size_of::<nfulnl_msg_packet_hw>(),
        12usize,
        concat!("Size of: ", stringify!(nfulnl_msg_packet_hw))
    );
    assert_eq!(
        ::std::mem::align_of::<nfulnl_msg_packet_hw>(),
        1usize,
        concat!("Alignment of ", stringify!(nfulnl_msg_packet_hw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfulnl_msg_packet_hw>())).hw_addrlen as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hw),
            "::",
            stringify!(hw_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfulnl_msg_packet_hw>()))._pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hw),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nfulnl_msg_packet_hw>())).hw_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nfulnl_msg_packet_hw),
            "::",
            stringify!(hw_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nflog_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nflog_g_handle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nflog_data {
    _unused: [u8; 0],
}
extern "C" {
    pub static mut nflog_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nfnl_handle {
    _unused: [u8; 0],
}
extern "C" {
    pub fn nflog_nfnlh(h: *mut nflog_handle) -> *mut nfnl_handle;
    pub fn nflog_fd(h: *mut nflog_handle) -> ::std::os::raw::c_int;
}
pub type nflog_callback = ::std::option::Option<
    unsafe extern "C" fn(
        gh: *mut nflog_g_handle,
        nfmsg: *mut nfgenmsg,
        nfd: *mut nflog_data,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn nflog_open() -> *mut nflog_handle;
    pub fn nflog_open_nfnl(nfnlh: *mut nfnl_handle) -> *mut nflog_handle;
    pub fn nflog_close(h: *mut nflog_handle) -> ::std::os::raw::c_int;
    pub fn nflog_bind_pf(h: *mut nflog_handle, pf: u16) -> ::std::os::raw::c_int;
    pub fn nflog_unbind_pf(h: *mut nflog_handle, pf: u16) -> ::std::os::raw::c_int;
    pub fn nflog_bind_group(h: *mut nflog_handle, num: u16) -> *mut nflog_g_handle;
    pub fn nflog_unbind_group(gh: *mut nflog_g_handle) -> ::std::os::raw::c_int;
    pub fn nflog_set_mode(
        gh: *mut nflog_g_handle,
        mode: u8,
        len: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
    pub fn nflog_set_timeout(gh: *mut nflog_g_handle, timeout: u32) -> ::std::os::raw::c_int;
    pub fn nflog_set_flags(gh: *mut nflog_g_handle, flags: u16) -> ::std::os::raw::c_int;
    pub fn nflog_set_qthresh(gh: *mut nflog_g_handle, qthresh: u32) -> ::std::os::raw::c_int;
    pub fn nflog_set_nlbufsiz(gh: *mut nflog_g_handle, nlbufsiz: u32) -> ::std::os::raw::c_int;
    pub fn nflog_callback_register(
        gh: *mut nflog_g_handle,
        cb: nflog_callback,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
    pub fn nflog_handle_packet(
        h: *mut nflog_handle,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn nflog_get_msg_packet_hdr(nfad: *mut nflog_data) -> *mut nfulnl_msg_packet_hdr;
    pub fn nflog_get_hwtype(nfad: *mut nflog_data) -> u16;
    pub fn nflog_get_msg_packet_hwhdrlen(nfad: *mut nflog_data) -> u16;
    pub fn nflog_get_msg_packet_hwhdr(nfad: *mut nflog_data) -> *mut ::std::os::raw::c_char;
    pub fn nflog_get_nfmark(nfad: *mut nflog_data) -> u32;
    pub fn nflog_get_timestamp(nfad: *mut nflog_data, tv: *mut timeval) -> ::std::os::raw::c_int;
    pub fn nflog_get_indev(nfad: *mut nflog_data) -> u32;
    pub fn nflog_get_physindev(nfad: *mut nflog_data) -> u32;
    pub fn nflog_get_outdev(nfad: *mut nflog_data) -> u32;
    pub fn nflog_get_physoutdev(nfad: *mut nflog_data) -> u32;
    pub fn nflog_get_packet_hw(nfad: *mut nflog_data) -> *mut nfulnl_msg_packet_hw;
    pub fn nflog_get_payload(
        nfad: *mut nflog_data,
        data: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn nflog_get_prefix(nfad: *mut nflog_data) -> *mut ::std::os::raw::c_char;
    pub fn nflog_get_uid(nfad: *mut nflog_data, uid: *mut u32) -> ::std::os::raw::c_int;
    pub fn nflog_get_gid(nfad: *mut nflog_data, gid: *mut u32) -> ::std::os::raw::c_int;
    pub fn nflog_get_seq(nfad: *mut nflog_data, seq: *mut u32) -> ::std::os::raw::c_int;
    pub fn nflog_get_seq_global(nfad: *mut nflog_data, seq: *mut u32) -> ::std::os::raw::c_int;
}
pub const NFLOG_XML_PREFIX: u32 = 1;
pub const NFLOG_XML_HW: u32 = 2;
pub const NFLOG_XML_MARK: u32 = 4;
pub const NFLOG_XML_DEV: u32 = 8;
pub const NFLOG_XML_PHYSDEV: u32 = 16;
pub const NFLOG_XML_PAYLOAD: u32 = 32;
pub const NFLOG_XML_TIME: u32 = 64;
pub const NFLOG_XML_ALL: u32 = !0;
extern "C" {
    pub fn nflog_snprintf_xml(
        buf: *mut ::std::os::raw::c_char,
        len: usize,
        tb: *mut nflog_data,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
